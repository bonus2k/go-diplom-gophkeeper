// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bonus2k/go-diplom-gophkeeper/internal/database (interfaces: DataStorable)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/bonus2k/go-diplom-gophkeeper/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockDataStorable is a mock of DataStorable interface.
type MockDataStorable struct {
	ctrl     *gomock.Controller
	recorder *MockDataStorableMockRecorder
}

// MockDataStorableMockRecorder is the mock recorder for MockDataStorable.
type MockDataStorableMockRecorder struct {
	mock *MockDataStorable
}

// NewMockDataStorable creates a new mock instance.
func NewMockDataStorable(ctrl *gomock.Controller) *MockDataStorable {
	mock := &MockDataStorable{ctrl: ctrl}
	mock.recorder = &MockDataStorableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStorable) EXPECT() *MockDataStorableMockRecorder {
	return m.recorder
}

// AddSecretData mocks base method.
func (m *MockDataStorable) AddSecretData(arg0 context.Context, arg1 models.SecretData) (*models.SecretData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSecretData", arg0, arg1)
	ret0, _ := ret[0].(*models.SecretData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSecretData indicates an expected call of AddSecretData.
func (mr *MockDataStorableMockRecorder) AddSecretData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecretData", reflect.TypeOf((*MockDataStorable)(nil).AddSecretData), arg0, arg1)
}

// AddUser mocks base method.
func (m *MockDataStorable) AddUser(arg0 context.Context, arg1 *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockDataStorableMockRecorder) AddUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockDataStorable)(nil).AddUser), arg0, arg1)
}

// DeleteSecretData mocks base method.
func (m *MockDataStorable) DeleteSecretData(arg0 context.Context, arg1 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecretData", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecretData indicates an expected call of DeleteSecretData.
func (mr *MockDataStorableMockRecorder) DeleteSecretData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecretData", reflect.TypeOf((*MockDataStorable)(nil).DeleteSecretData), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockDataStorable) DeleteUser(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockDataStorableMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockDataStorable)(nil).DeleteUser), arg0, arg1)
}

// GetSecretData mocks base method.
func (m *MockDataStorable) GetSecretData(arg0 context.Context) (*[]models.SecretData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretData", arg0)
	ret0, _ := ret[0].(*[]models.SecretData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretData indicates an expected call of GetSecretData.
func (mr *MockDataStorableMockRecorder) GetSecretData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretData", reflect.TypeOf((*MockDataStorable)(nil).GetSecretData), arg0)
}

// GetUser mocks base method.
func (m *MockDataStorable) GetUser(arg0 context.Context, arg1 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDataStorableMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDataStorable)(nil).GetUser), arg0, arg1)
}

// Migrate mocks base method.
func (m *MockDataStorable) Migrate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockDataStorableMockRecorder) Migrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockDataStorable)(nil).Migrate))
}

// UpdateSecretData mocks base method.
func (m *MockDataStorable) UpdateSecretData(arg0 context.Context, arg1 models.SecretData) (*models.SecretData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecretData", arg0, arg1)
	ret0, _ := ret[0].(*models.SecretData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecretData indicates an expected call of UpdateSecretData.
func (mr *MockDataStorableMockRecorder) UpdateSecretData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecretData", reflect.TypeOf((*MockDataStorable)(nil).UpdateSecretData), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockDataStorable) UpdateUser(arg0 context.Context, arg1 models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDataStorableMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDataStorable)(nil).UpdateUser), arg0, arg1)
}
