// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: internal/interfaces/proto/keeper.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NoteServices_AddNote_FullMethodName    = "/proto.NoteServices/AddNote"
	NoteServices_DeleteNote_FullMethodName = "/proto.NoteServices/DeleteNote"
	NoteServices_UpdateNote_FullMethodName = "/proto.NoteServices/UpdateNote"
	NoteServices_GetNotes_FullMethodName   = "/proto.NoteServices/GetNotes"
)

// NoteServicesClient is the client API for NoteServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoteServicesClient interface {
	AddNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteNote(ctx context.Context, in *NoteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*empty.Empty, error)
	GetNotes(ctx context.Context, in *NoteRequest, opts ...grpc.CallOption) (*NoteList, error)
}

type noteServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewNoteServicesClient(cc grpc.ClientConnInterface) NoteServicesClient {
	return &noteServicesClient{cc}
}

func (c *noteServicesClient) AddNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, NoteServices_AddNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServicesClient) DeleteNote(ctx context.Context, in *NoteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, NoteServices_DeleteNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServicesClient) UpdateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, NoteServices_UpdateNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServicesClient) GetNotes(ctx context.Context, in *NoteRequest, opts ...grpc.CallOption) (*NoteList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NoteList)
	err := c.cc.Invoke(ctx, NoteServices_GetNotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoteServicesServer is the server API for NoteServices service.
// All implementations must embed UnimplementedNoteServicesServer
// for forward compatibility.
type NoteServicesServer interface {
	AddNote(context.Context, *Note) (*empty.Empty, error)
	DeleteNote(context.Context, *NoteRequest) (*empty.Empty, error)
	UpdateNote(context.Context, *Note) (*empty.Empty, error)
	GetNotes(context.Context, *NoteRequest) (*NoteList, error)
	mustEmbedUnimplementedNoteServicesServer()
}

// UnimplementedNoteServicesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNoteServicesServer struct{}

func (UnimplementedNoteServicesServer) AddNote(context.Context, *Note) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNote not implemented")
}
func (UnimplementedNoteServicesServer) DeleteNote(context.Context, *NoteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNote not implemented")
}
func (UnimplementedNoteServicesServer) UpdateNote(context.Context, *Note) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNote not implemented")
}
func (UnimplementedNoteServicesServer) GetNotes(context.Context, *NoteRequest) (*NoteList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotes not implemented")
}
func (UnimplementedNoteServicesServer) mustEmbedUnimplementedNoteServicesServer() {}
func (UnimplementedNoteServicesServer) testEmbeddedByValue()                      {}

// UnsafeNoteServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoteServicesServer will
// result in compilation errors.
type UnsafeNoteServicesServer interface {
	mustEmbedUnimplementedNoteServicesServer()
}

func RegisterNoteServicesServer(s grpc.ServiceRegistrar, srv NoteServicesServer) {
	// If the following call pancis, it indicates UnimplementedNoteServicesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NoteServices_ServiceDesc, srv)
}

func _NoteServices_AddNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServicesServer).AddNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteServices_AddNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServicesServer).AddNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteServices_DeleteNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServicesServer).DeleteNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteServices_DeleteNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServicesServer).DeleteNote(ctx, req.(*NoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteServices_UpdateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServicesServer).UpdateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteServices_UpdateNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServicesServer).UpdateNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteServices_GetNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServicesServer).GetNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteServices_GetNotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServicesServer).GetNotes(ctx, req.(*NoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NoteServices_ServiceDesc is the grpc.ServiceDesc for NoteServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoteServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NoteServices",
	HandlerType: (*NoteServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNote",
			Handler:    _NoteServices_AddNote_Handler,
		},
		{
			MethodName: "DeleteNote",
			Handler:    _NoteServices_DeleteNote_Handler,
		},
		{
			MethodName: "UpdateNote",
			Handler:    _NoteServices_UpdateNote_Handler,
		},
		{
			MethodName: "GetNotes",
			Handler:    _NoteServices_GetNotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/interfaces/proto/keeper.proto",
}

const (
	UserServices_Register_FullMethodName = "/proto.UserServices/Register"
	UserServices_Login_FullMethodName    = "/proto.UserServices/Login"
)

// UserServicesClient is the client API for UserServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServicesClient interface {
	Register(ctx context.Context, in *User, opts ...grpc.CallOption) (*JwtToken, error)
	Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*JwtToken, error)
}

type userServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServicesClient(cc grpc.ClientConnInterface) UserServicesClient {
	return &userServicesClient{cc}
}

func (c *userServicesClient) Register(ctx context.Context, in *User, opts ...grpc.CallOption) (*JwtToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JwtToken)
	err := c.cc.Invoke(ctx, UserServices_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicesClient) Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*JwtToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JwtToken)
	err := c.cc.Invoke(ctx, UserServices_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServicesServer is the server API for UserServices service.
// All implementations must embed UnimplementedUserServicesServer
// for forward compatibility.
type UserServicesServer interface {
	Register(context.Context, *User) (*JwtToken, error)
	Login(context.Context, *User) (*JwtToken, error)
	mustEmbedUnimplementedUserServicesServer()
}

// UnimplementedUserServicesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServicesServer struct{}

func (UnimplementedUserServicesServer) Register(context.Context, *User) (*JwtToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServicesServer) Login(context.Context, *User) (*JwtToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServicesServer) mustEmbedUnimplementedUserServicesServer() {}
func (UnimplementedUserServicesServer) testEmbeddedByValue()                      {}

// UnsafeUserServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServicesServer will
// result in compilation errors.
type UnsafeUserServicesServer interface {
	mustEmbedUnimplementedUserServicesServer()
}

func RegisterUserServicesServer(s grpc.ServiceRegistrar, srv UserServicesServer) {
	// If the following call pancis, it indicates UnimplementedUserServicesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserServices_ServiceDesc, srv)
}

func _UserServices_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicesServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServices_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicesServer).Register(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServices_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicesServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServices_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicesServer).Login(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// UserServices_ServiceDesc is the grpc.ServiceDesc for UserServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserServices",
	HandlerType: (*UserServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserServices_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserServices_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/interfaces/proto/keeper.proto",
}
